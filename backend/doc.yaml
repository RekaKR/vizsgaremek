swagger: '2.0'
info:
  description: Ez egy online térbe helyezett esküvői meghívó oldal, ahol a menyasszony és a vőlegény könnyedén tudják szervezni és rendezni a tevékenységeiket, ügyeiket, és ahol a vendégek is megtalálnak minden szükséges információt.
  title: Esküvő app - vizsgaremek
  version: 1.0.0
  
  contact:
    email: dummy@email.hu #contact info for your development or API team

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: accommodations
  description: Endpoints for the reading, creation and deletion of accommodations
- name: emaillists
  description: Endpoints for the reading, creation and deletion of emaillists
- name: goodwishes
  description: Endpoints for the reading and creation of goodwishes
- name: logins
  description: Endpoints for the creation of logins
- name: timelines
  description: Endpoints for the reading, creation and deletion of timelines
- name: todos
  description: Endpoints for the reading, creation, modification and deletion of todos
- name: users
  description: Endpoints for the reading and modification of users


paths:
  /api/accommodation:
    get:
      tags:
      - accommodations
      summary: Gets all accommodations
      operationId: getAccommodations
      description: |
        Get all accommodations
      produces:
      - application/json
      responses:
        200:
          description: got all the accommodations
          schema:
            type: array
            items:
              $ref: '#/definitions/Accommodation'
        403:
          description: Couldn't get accommodation
    post:
      tags:
      - accommodations
      summary: Creates a new accommodation
      operationId: createAccommodation
      description: Creates a new accommodation
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newAccommodationObject
        description: new accommodation to add
        schema:
          $ref: '#/definitions/Accommodation'
      responses:
        200:
          description: accommodation created
        401:
          description: accommodation was not created
      security:
      - api_key: []
  /api/accommodation/:id:
    delete:
      tags:
      - accommodations
      summary: Delete accommodation
      operationId: deleteAccommodation
      description: |
        Delete accommodation
      responses:
        200:
          description: accommodation deleted
          schema:
            type: array
            items:
              $ref: '#/definitions/Accommodation'
        400:
          description: accommodation was not deleted
      security:
      - api_key: []
  /api/emaillist:
    get:
      tags:
      - emaillists
      summary: Gets all emaillists
      operationId: getEmaillists
      description: |
        Get all emaillists
      produces:
      - application/json
      parameters:
      - in: query
        name: emaillistsString
        description: get all the emaillists
        required: false
        type: string
      responses:
        200:
          description: got all the emaillists
          schema:
            type: array
            items:
              $ref: '#/definitions/EmailList'
        403:
          description: Couldn't get emaillist
      security:
      - api_key: []
    post: #kell-e a 200-ba?
      tags:
      - emaillists
      summary: Creates a new emaillist
      operationId: createEmaillist
      description: Creates a new emaillist
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newEmailListObject
        description: new emaillist to add
        schema:
          $ref: '#/definitions/EmailList'
      responses:
        200:
          description: emaillist created
          schema:
            type: array
            items:
              $ref: '#/definitions/EmailList'
        401:
          description: emaillist was not created
      security:
      - api_key: []
  /api/emaillist/:id:
    delete:
      tags:
      - emaillists
      summary: Delete emaillist
      operationId: deleteEmaillist
      description: |
        Delete emaillist
      responses:
        200:
          description: emaillist deleted
          schema:
            type: array
            items:
              $ref: '#/definitions/EmailList'
        401:
          description: emaillist was not deleted
      security:
      - api_key: []
  /api/good-wish:
    get:
      tags:
      - goodwishes
      summary: Gets all goodwishes
      operationId: getGoodwishes
      description: |
        Get all goodwishes
      produces:
      - application/json
      parameters:
      - in: query
        name: goodwishesString
        description: get all the goodwishes
        required: false
        type: array
      responses:
        200:
          description: got all the goodwishes
          schema:
            type: array
            items:
              $ref: '#/definitions/GoodWishes'
        403:
          description: Couldn't get goodwishes
      security:
      - api_key: []
    post:
      tags:
      - goodwishes
      summary: Creates a new good wish
      operationId: createGoodwishes
      description: Creates a new good wish
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newGoodWishObject
        description: new goodwish to add
        schema:
          $ref: '#/definitions/GoodWish'
      responses:
        200:
          description: goodwishe created
        401:
          description: goodwishe was not created
      security:
      - api_key: []
  /api/timeline:
    get:
      tags:
      - timelines
      summary: Gets all timelines
      operationId: getTimelines
      description: |
        Get all timelines
      produces:
      - application/json
      parameters:
      - in: query
        name: timelinesString
        description: get all the timelines
        required: false
        type: string
      responses:
        200:
          description: got all the timelines
          schema:
            type: array
            items:
              $ref: '#/definitions/Timeline'
        403:
          description: Couldn't get timeline
      security:
      - api_key: []
    post:  #kell-e a 200-ba?
      tags:
      - timelines
      summary: Creates a new timeline
      operationId: createTimeline
      description: Creates a new timeline
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newTimelineObject
        description: new timeline to add
        schema:
          $ref: '#/definitions/Timeline'
      responses:
        200:
          description: timeline created
          schema:
            type: array
            items:
              $ref: '#/definitions/Timeline'
        401:
          description: timeline was not created
      security:
      - api_key: []
      /api/accommodation/:id:
  /api/timeline/:id:
    delete:
      tags:
      - timelines
      summary: Delete timelines
      operationId: deleteTimeline
      description: |
        Delete timelines
      responses:
        200:
          description: timelines deleted
          schema:
            type: array
            items:
              $ref: '#/definitions/Timeline'
        400:
          description: timelines was not deleted
      security:
      - api_key: []
  /api/to-do-list:
    get:
      tags:
      - todos
      summary: Gets all todos
      operationId: getTodos
      description: |
        Get all todos
      produces:
      - application/json
      parameters:
      - in: query
        name: todosString
        description: get all the todos
        required: false
        type: string
      responses:
        200:
          description: got all the todos
          schema:
            type: array
            items:
              $ref: '#/definitions/ToDo'
        403:
          description: Couldn't get todos
      security:
      - api_key: []
    post:
      tags:
      - todos
      summary: Creates a new todo
      operationId: createTodo
      description: Creates a new todo
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newTodoObject
        description: new todo to add
        schema:
          $ref: '#/definitions/ToDo'
      responses:
        200:
          description: todo created
        401:
          description: todo was not created
      security:
      - api_key: []
  /api/to-do-list/:id:
    patch:
      tags:
      - todos
      summary: Update todo
      operationId: updateTodo
      description: |
        Update todo
      responses:
        200:
          description: todo updated
          schema:
            type: array
            items:
              $ref: '#/definitions/ToDo'
        400:
          description: todo was not updated
      security:
      - api_key: []
    delete:
      tags:
      - todos
      summary: Delete todo
      operationId: deleteTodo
      description: |
        Delete todo
      responses:
        200:
          description: todo deleted
          schema:
            type: array
            items:
              $ref: '#/definitions/ToDo'
        400:
          description: todo was not deleted
      security:
      - api_key: []
  /api/user:
    get:
      tags:
      - users
      summary: Gets all user
      operationId: getUser
      description: |
        Get all user
      produces:
      - application/json
      parameters:
      - in: query
        name: userString
        description: get all the user
        required: false
        type: string
      responses:
        200:
          description: got all the user
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        403:
          description: Couldn't get user
      security:
      - api_key: []
  /api/user/all:
    get:
      tags:
      - users
      summary: Gets all users
      operationId: getUsers
      description: |
        Get all users
      produces:
      - application/json
      parameters:
      - in: query
        name: usersString
        description: get all the users
        required: false
        type: string
      responses:
        200:
          description: got all the users
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        403:
          description: Couldn't get users
      security:
      - api_key: []
  /api/user/plus-one:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updatePlusOne
      description: |
        Update user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: user updated
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: user was not updated
      security:
      - api_key: []
  /api/user/plus-one-details:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updatePlusOneDetails
      description: |
        Update user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: user updated
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: user was not updated
      security:
      - api_key: []
  /api/user/food-sensitivity:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updateFoodSensitivity
      description: |
        Update user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: user updated
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: user was not updated
      security:
      - api_key: []
      
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "X-API-Key"
    in: "header"

definitions:
  Accommodation:
    type: object
    required:
    - name
    - phoneNumber
    - website
    properties:
      name:
        type: string
        #format: uuid
        example: "Réka"
      address:
        type: object
        required:
        - zip
        - city
        - street
        - houseNumber
        properties:
          zip:
            type: number
            example: 1234
          city:
            type: string
            example: "Budapest"
          street:
            type: string
            example: "Szép utca"
          houseNumber:
            type: number
            example: 15
      phoneNumber:
        type: string
        example: "+36111111111"
      website:
        type: string
        format: uri
        example: "http://weboldal.com"
  EmailList:
    type: object
    required:
    - email
    - role
    properties:
      email:
        type: string
        #uniqueItems: true ?!
        format: email
        example: "documentation@email.hu"
      role:
        type: string
        example: "guest"
  GoodWish:
    type: object
    required:
    - goodWish
    - from
    - email
    properties:
      goodWish:
        type: string
        example: "Nagyon sok bologságot kívánok!"
      from:
        type: string
        example: "Réka K. PhD"
      email:
        type: string
        example: "documentation@email.hu"
  Timeline:
    type: object
    required:
    - time
    - happening
    - place
    properties:
      time:
        type: string
        example: "Reggel 8"
      happening:
        type: string
        example: "Villásreggeli"
      place:
        type: string,
        example: "Étkező"
  ToDo:
    type: object
    required:
    - type
    - task
    properties:
      type:
        type: string
        example: "clothes"
      task:
        type: string
        example: "Esküvői ruha vásárlás"
      done:
        type: boolean,
        example: false
  User:
    type: object
    required:
    - username
    - name
    - email
    - googleId
    - role
    - picture
    properties:
      username:
        type: string
        example: "RékaK"
      name:
        type: string
        example: "Réka K. PhD"
      email:
        type: string
        #uniqueItems: true ?!
        format: email
        example: "documentation@email.hu"
      googleId:
        type: string
        #uniqueItems: true ?!
        example: "112211221122112211223"
      role:
        type: string
        example: "guest"
      picture:
        type: string
        format: uri
        example: "https://lh3.googleusercontent.com/picture"
      plusOne:
        type: object
        required:
        - isComing
        properties:
          isComing:
            type: boolean
            example: true
          name:
            type: string
            example: "Réka K. PhD 2"
          foodSensitivity:
            type: array
            items:
              type: string
              example: ["laktóz mentes", "glutén mentes", "vega"]
      foodSensitivity:
        type: array
        items:
          type: string
          example: ["cukor mentes", "vegán"]