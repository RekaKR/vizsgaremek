swagger: "2.0"
info:
  description: "Ez egy online térbe helyezett esküvői meghívó oldal, ahol a menyasszony és a vőlegény könnyedén tudják szervezni és rendezni a tevékenységeiket, ügyeiket, és ahol a vendégek is megtalálnak minden szükséges információt."
  version: "1.0.0"
  title: "Esküvő app - vizsgaremek"
  contact:
    email: "dummy@email.hu" #contact info for your development or API team
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3001"
basePath: "/"
apis: ["SwaggerImplementation/start.js"]
tags:
- name: "accommodations"
  description: "Endpoints for the reading, creation and deletion of accommodations"
- name: "emaillists"
  description: "Endpoints for the reading, creation and deletion of emaillists"
- name: "goodwishes"
  description: "Endpoints for the reading and creation of goodwishes"
- name: "logins"
  description: "Endpoints for the creation of logins"
- name: "timelines"
  description: "Endpoints for the reading, creation and deletion of timelines"
- name: "todos"
  description: "Endpoints for the reading, creation, modification and deletion of todos"
- name: "users"
  description: "Endpoints for the reading and modification of users"
schemes:
- "http"
- "https"
paths:
  /api/accommodation: #kész
    get: #kész
      tags:
      - "accommodations"
      summary: "Returns all accommodations"
      description: "Get all accommodations"
      operationId: "getAccommodations"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Accommodation"
        403:
          description: "Couldn't get accommodation"
    post: #kész
      tags:
      - "accommodations"
      summary: "Add a new accommodation"
      description: "Creates a new accommodation"
      operationId: "createAccommodation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "newAccommodationObject"
        description: "Accommodation object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/Accommodation"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/accommodation/:id: #kész
    delete: #kész
      tags:
      - "accommodations"
      summary: "Delete an accommodation"
      description: "Delete an accommodation by id"
      operationId: "deleteAccommodation"
      produces:
      - "application/json"
      parameters:
      - name: "accommodationId"
        in: "path"
        description: "Accommodation id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Couldn't delete accommodation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/emaillist: #kész
    get: #kész
      tags:
      - "emaillists"
      summary: "Returns all emaillists"
      description: "Get all emaillists"
      operationId: "getEmaillists"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          description: "Couldn't get user"
      security:
      - api_key: []    
    post: #kész
      tags:
      - "emaillists"
      summary: "Add a new emaillist"
      description: "Creates a new emaillist"
      operationId: "createEmaillist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "newEmailListObject"
        description: "Emaillist object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/EmailList"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/emaillist/:id:
    delete:
      tags:
      - emaillists
      summary: Delete emaillist
      operationId: deleteEmaillist
      description: |
        Delete emaillist
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/EmailList"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/good-wish:
    get:
      tags:
      - goodwishes
      summary: Gets all goodwishes
      operationId: getGoodwishes
      description: |
        Get all goodwishes
      produces:
      - "application/json"
      parameters:
      - in: query
        name: goodwishesString
        description: get all the goodwishes
        required: false
        type: array
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/GoodWishes"
        401:
          description: "Unauthorized"
        403:
          description: Couldn't get goodwishes
      security:
      - api_key: []
    post:
      tags:
      - goodwishes
      summary: Creates a new good wish
      operationId: createGoodwishes
      description: Creates a new good wish
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: newGoodWishObject
        description: new goodwish to add
        schema:
          $ref: "#/definitions/GoodWish"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/timeline: #kész
    get: #kész
      tags:
      - "timelines"
      summary: "Returns all timelines"
      description: "Get all timelines"
      operationId: "getTimelines"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Timeline"
        403:
          description: "Couldn't get timeline"
    post: #kész
      tags:
      - "timelines"
      summary: "Add a new timeline"
      description: "Creates a new timeline"
      operationId: "createTimeline"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "newTimelineObject"
        description: "Timeline object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/Timeline"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/timeline/:id: #kész
    delete: #kész
      tags:
      - "timelines"
      summary: "Delete a timeline"
      description: "Delete a timeline by id"
      operationId: "deleteTimeline"
      produces:
      - "application/json"
      parameters:
      - name: "timelineId"
        in: "path"
        description: "Timeline id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Couldn't delete a timeline"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/to-do-list:
    get:
      tags:
      - todos
      summary: Gets all todos
      operationId: getTodos
      description: |
        Get all todos
      produces:
      - "application/json"
      parameters:
      - in: query
        name: todosString
        description: get all the todos
        required: false
        type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/ToDo"
        401:
          description: "Unauthorized"
        403:
          description: Couldn't get todos
      security:
      - api_key: []
    post:
      tags:
      - todos
      summary: Creates a new todo
      operationId: createTodo
      description: Creates a new todo
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: newTodoObject
        description: new todo to add
        schema:
          $ref: "#/definitions/ToDo"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      security:
      - api_key: []
  /api/to-do-list/:id:
    patch:
      tags:
      - "todos"
      summary: "Update an existing todo"
      description: "Update todo"
      operationId: "updateTodo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "updatedTodoObject"
        description: "Todo object that needs to be updated to the store"
        #required: true
        schema:
          $ref: "#/definitions/ToDo"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToDo"
        400:
          description: "todo was not updated"
      security:
      - api_key: []
    delete:
      tags:
      - todos
      summary: Delete todo
      operationId: deleteTodo
      description: |
        Delete todo
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/ToDo"
        400:
          description: todo was not deleted
      security:
      - api_key: []
  /api/user: #kész
    get: #kész
      tags:
      - "users"
      summary: "Returns a user"
      description: "Get a user"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "googleId"
        description: "Get a user by its google id from token."
        required: true
        type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          description: "Couldn't get user"
      security:
      - api_key: []
  /api/user/all: #kész
    get: #kész
      tags:
       - "users"
      summary: "Returns all users"
      description: "Get all users"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          description: Couldn't get users
      security:
      - api_key: []
  /api/user/plus-one:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updatePlusOne
      description: |
        Update user
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        400:
          description: user was not updated
      security:
      - api_key: []
  /api/user/plus-one-details:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updatePlusOneDetails
      description: |
        Update user
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        400:
          description: user was not updated
      security:
      - api_key: []
  /api/user/food-sensitivity:
    patch:
      tags:
      - users
      summary: Update user
      operationId: updateFoodSensitivity
      description: |
        Update user
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: userObject
        description: update user
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        400:
          description: user was not updated
      security:
      - api_key: []
      
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "X-API-Key"
    in: "header"

definitions:
  Accommodation:
    type: object
    required:
    - name
    - phoneNumber
    - website
    properties:
      name:
        type: string
        #format: uuid
        example: "Réka"
      address:
        type: object
        required:
        - zip
        - city
        - street
        - houseNumber
        properties:
          zip:
            type: number
            example: 1234
          city:
            type: string
            example: "Budapest"
          street:
            type: string
            example: "Szép utca"
          houseNumber:
            type: number
            example: 15
      phoneNumber:
        type: string
        example: "+36111111111"
      website:
        type: string
        format: uri
        example: "http://weboldal.com"
  EmailList:
    type: object
    required:
    - email
    - role
    properties:
      email:
        type: string
        #uniqueItems: true ?!
        format: email
        example: "documentation@email.hu"
      role:
        type: string
        example: "guest"
  GoodWish:
    type: object
    required:
    - goodWish
    - from
    - email
    properties:
      goodWish:
        type: string
        example: "Nagyon sok bologságot kívánok!"
      from:
        type: string
        example: "Réka K. PhD"
      email:
        type: string
        example: "documentation@email.hu"
  Timeline:
    type: object
    required:
    - time
    - happening
    - place
    properties:
      time:
        type: string
        example: "Reggel 8"
      happening:
        type: string
        example: "Villásreggeli"
      place:
        type: string,
        example: "Étkező"
  ToDo:
    type: object
    required:
    - type
    - task
    properties:
      type:
        type: string
        example: "clothes"
      task:
        type: string
        example: "Esküvői ruha vásárlás"
      done:
        type: boolean,
        example: false
  User:
    type: object
    required:
    - username
    - name
    - email
    - googleId
    - role
    - picture
    properties:
      username:
        type: string
        example: "RékaK"
      name:
        type: string
        example: "Réka K. PhD"
      email:
        type: string
        #uniqueItems: true ?!
        format: email
        example: "documentation@email.hu"
      googleId:
        type: string
        #uniqueItems: true ?!
        example: "112211221122112211223"
      role:
        type: string
        example: "guest"
      picture:
        type: string
        format: uri
        example: "https://lh3.googleusercontent.com/picture"
      plusOne:
        type: object
        required:
        - isComing
        properties:
          isComing:
            type: boolean
            example: true
          name:
            type: string
            example: "Réka K. PhD 2"
          foodSensitivity:
            type: array
            items:
              type: string
              example: ["laktóz mentes", "glutén mentes", "vega"]
      foodSensitivity:
        type: array
        items:
          type: string
          example: ["cukor mentes", "vegán"]